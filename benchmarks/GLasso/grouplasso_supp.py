import osimport numpy as npimport rpy2.robjects as robjectsfrom rpy2.robjects.packages import importrfrom rpy2.robjects.vectors import ListVector, IntVector, FloatVector, StrVectorimport rpy2.robjects.numpy2ri as numpy2ribase = importr('base')RMTL = importr('RMTL')os.environ["R_HOME"] = "/Library/Frameworks/R.framework/Resources"# numpy2ri.activate()def convert_to_r_element(element):    if isinstance(element, list) and all(isinstance(x, int) for x in element):        return IntVector(element)    elif isinstance(element, list) and all(isinstance(x, float) for x in element):        return FloatVector(element)    elif isinstance(element, str):        return StrVector([element])    elif isinstance(element, np.ndarray):        return numpy2ri.numpy2rpy(element)    elif isinstance(element, list) and all(isinstance(x, str) for x in element):        return StrVector(element)    else:        raise ValueError("Unsupported element type")def GLasso(data):    T = len(data)    x_list = []    y_list = []    for t in range(T):        x_list.append(data[t][0])        y_list.append(data[t][1])    x_list_r = ListVector({f'element_{i}': convert_to_r_element(e) for i, e in enumerate(x_list)})    y_list_r = ListVector({f'element_{i}': convert_to_r_element(e) for i, e in enumerate(y_list)})    seq_values = 10.0 ** np.arange(1, -5, -1)    r_seq_values = FloatVector(seq_values)    fit_cv = RMTL.cvMTL(X = x_list_r, Y = y_list_r, type="Regression", Regularization="L21", Lam1_seq=r_seq_values, Lam2=0)    fit = RMTL.MTL(X = x_list_r, Y = y_list_r, type="Regression", Regularization="L21",                      Lam1 = fit_cv.rx2('Lam1.min'), Lam1_seq=r_seq_values, Lam2=0)    beta_hat_GLasso = np.array(fit.rx2('W'))    return(beta_hat_GLasso)